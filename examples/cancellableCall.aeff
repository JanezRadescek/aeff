operation call : int * int
operation result : int * int
operation cancel : int
operation dummy : empty

let callWith callCounter =
    fun x |->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        promise (result (y, callNo') when callNo = callNo' |->
            return <<y>>
        ) as p in
        let valueThunk () = awaitValue p in
        let cancelThunk () = send cancel callNo in
        let changeMind x = cancelThunk (); send call (x, callNo) in
        return (valueThunk, cancelThunk, changeMind)

let rec awaitCancel callNo runBeforeStall =
    promise (cancel callNo' |->
        if callNo = callNo' then
            promise (dummy empty |-> return <<empty>>) as dummyPromise in
            runBeforeStall ();
            awaitValue dummyPromise;
            awaitCancel callNo runBeforeStall
        else
            awaitCancel callNo runBeforeStall
    ) as p in return p

let remote f =
    let rec loop () =
        promise (call (x, callNo) |->
            awaitCancel callNo loop;
            let y = f x in
            send result (y, callNo);
            loop ()
        ) as p in return p
    in
    loop ()

let remoteCallReInvoker () =
    let callsToReInvoke = ref [] in
    let rec reInvokerCall () =
        promise (call (x,callNo) |->
            callsToReInvoke := (x, callNo) :: !callsToReInvoke;
            reInvokerCall ()
        ) as _ in return <<()>>
    in
    let rec reInvokerResult () =
        promise (result (y, callNo) |->
            callsToReInvoke := filter (fun (_, callNo') |-> callNo <> callNo') !callsToReInvoke;
            reInvokerResult ()
        ) as _ in return <<()>>
    in
    let rec reInvokerCancel () =
        let rec reInvokerWrapper calls =
            match calls with
            | [] |-> return ()
            | (x, callNo) :: calls |-> send call (x, callNo); reInvokerWrapper calls
        in
        promise (cancel callNo |->
            callsToReInvoke := filter (fun (_, callNo') |-> callNo <> callNo') !callsToReInvoke;
            reInvokerWrapper (reverse !callsToReInvoke);
            reInvokerCancel ()
        ) as _ in return <<()>>
    in
    reInvokerCall ();
    reInvokerResult ();
    reInvokerCancel ()

run
    let callCounter = ref 0 in
    let result1, cancel1, changeMind1 = callWith callCounter 10 in
    let result2, cancel2, changeMind2 = callWith callCounter 20 in
    cancel1 ();
    let result3, cancel3, changeMind3 = callWith callCounter 30 in
    changeMind3 (result2 ());
    result3 ()

run
    remoteCallReInvoker ()

run
    remote (fun x |-> 10 * (20 * (30 * x)))