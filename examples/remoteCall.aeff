operation call : int * int
operation result : int * int

let naiveCallWith x =
    send call x;
    promise (result y |-> return <<y>>) as p in
    fun () |-> return awaitValue p

let callWith callCounter =
    fun x |->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        let rec awaitLoop () =
            promise (result (y, callNo') |->
                if callNo = callNo' then
                    return <<y>>
                else
                    awaitLoop ()
            ) as resultPromise in return resultPromise
        in
        let actualPromise = awaitLoop () in
        let valueThunk () = awaitValue actualPromise in
        return valueThunk

let remote f =
    let rec loop () =
        promise (call (x, callNo) |->
            let y = f x in
            send result (y, callNo);
            loop ()
        ) as p in return p
    in
    loop ()

run
    let callCounter = ref 0 in
    let yt = callWith callCounter 20 in
    let zt = callWith callCounter 30 in
    return (yt () * yt () + zt () * zt ())

run
    remote (fun x |-> 10 * (20 * (30 * x)))
