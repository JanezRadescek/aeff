operation request
operation response
operation nextItem
operation display
operation batchSizeRequest
operation batchSizeResponse


let client batchSize =
    batchSizeRequest ();
    promise batchSizeResponse batchSize ->
        return (fulfill batchSize)
    as batchSizePromise in

    let cachedData = ref [] in
    let requestInProgress = ref false in
    let currentItem = ref 0 in

    let requestNewData offset limit =
        if not !requestInProgress then
            requestInProgress := true;
            request (offset, limit);
            promise response newBatch ->
                requestInProgress := false;
                cachedData := !cachedData @ newBatch;
                return (fulfill ())
            as _ in
            ()
        else
            ()
    in

    let rec clientLoop batchSize =
        promise nextItem () ->
            let cachedSize = length !cachedData in
            begin
                if (!currentItem) > (cachedSize - batchSize / 2) then
                    requestNewData (cachedSize + 1) batchSize
                else
                    return ()
            end;
            begin
                if (!currentItem) < cachedSize then
                    display (nth !cachedData !currentItem);
                    currentItem := !currentItem + 1
                else  
                    display "wait a bit more"
            end;
            return (fulfill (clientLoop batchSize))
        as _ in
        return ()
    in

    await batchSizePromise until batchSize in
    clientLoop batchSize

let server batchSize =
    let rec waitForRequest () =
        promise request (offset, limit) ->
            let payload = map (fun x -> 10 * x) (range offset (offset + limit - 1)) in
            response payload;
            waitForRequest ()
        as _ in
        ()
    in
    let rec waitForBatchSize () =
        promise batchSizeRequest () ->
            batchSizeResponse batchSize;
            waitForBatchSize ()
        as _ in
        ()
    in

    waitForRequest ();
    waitForBatchSize ()

let rec user () =
    let rec wait n =
        if n = 0 then
            return ()
        else
            wait (n - 1)
    in
    nextItem ();
    wait 10;
    user ()

do
    client ()
do
    server 6
do
    user ()
