operation request : int
operation response : int list
operation nextItem : unit
operation display : string
operation batchSizeRequest : unit
operation batchSizeResponse : int


let (client : unit -> unit) () =
    let cachedData = ref [] in
    let requestInProgress = ref false in
    let currentItem = ref 0 in

    send batchSizeRequest ();
    promise (batchSizeResponse batchSize |-> return <<batchSize>>) as batchSizePromise in

    let requestNewData offset =
        requestInProgress := true;
        send request offset;
        promise (response newBatch |->
            cachedData := !cachedData @ newBatch;
            requestInProgress := false;
            return <<()>>)
        as _ in
        return ()
    in

    await batchSizePromise until <<batchSize>> in
    promise (nextItem () k |->
        let cachedSize = length !cachedData in
        (if (!currentItem > cachedSize - batchSize / 2) && (not !requestInProgress) then
                requestNewData (cachedSize + 1)
            else
                return ());
        (if (!currentItem) < cachedSize then
                send display (toString (nth !cachedData !currentItem));
                currentItem := !currentItem + 1
            else  
                send display "please wait a bit and try again");
        k ())
    as _ in
    ()

let (server : int -> unit) batchSize =
    promise (batchSizeRequest () k |->
            send batchSizeResponse batchSize;
            k ())
    as _ in

    promise (request offset k |->
            let payload = map (fun x |-> 10 * x) (range offset (offset + batchSize - 1)) in
            send response payload;
            k ())
    as _ in
    ()


let rec (user : unit -> 'd) () =
    let rec wait n = 
      if n = 0 then return () else wait (n - 1)
    in
    send nextItem ();
    wait 400000;
    user ()


run (server 42)
run (client ())
run (user ())
