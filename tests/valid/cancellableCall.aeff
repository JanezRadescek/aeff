operation call : int * int
operation result : int * int
operation cancel : int
operation dummy : empty

let (callWith : (int ref) -> int -> ( (unit -> int) * (unit -> unit) * (int -> unit) )) callCounter =
    fun x |->
        let callNo = !callCounter in
        send call (x, callNo);
        callCounter := callNo + 1;
        promise (result (y, callNo') k |->
            if callNo = callNo' then 
                return <<y>> 
            else k ()
        ) as p in
        let valueThunk () = awaitValue p in
        let cancelThunk () = send cancel callNo in
        let changeMind x = cancelThunk (); send call (x, callNo) in
        return (valueThunk, cancelThunk, changeMind)

let rec (awaitCancel : int -> (unit -> 'a) -> 'b) callNo runBeforeStall =
    promise (cancel callNo' k |->
        if callNo = callNo' then
            promise (dummy empty |-> return <<empty>>) as dummyPromise in
            runBeforeStall ();
            awaitValue dummyPromise;
            awaitCancel callNo runBeforeStall
        else k ()
    ) as p in return p

let (remote : (int -> int) -> 'd) f =
    promise (call (x, callNo) k |->
        awaitCancel callNo k;
        let y = f x in
        send result (y, callNo);
        k ()
    ) as p in return p
    

let (remoteCallReInvoker : unit -> <<unit>>) () =
    let callsToReInvoke = ref [] in
    
    promise (call (x,callNo) k |->
        callsToReInvoke := (x, callNo) :: !callsToReInvoke;
        k ()
    ) as _ in 

    promise (result (y, callNo) k |->
        callsToReInvoke := filter (fun (_, callNo') |-> callNo <> callNo') !callsToReInvoke;
        k ()
    ) as _ in
 
    promise (cancel callNo k |->
        callsToReInvoke := filter (fun (_, callNo') |-> callNo <> callNo') !callsToReInvoke;
        let rec reInvokerWrapper calls =
            match calls with
            | [] |-> return ()
            | (x, callNo) :: calls |-> send call (x, callNo); reInvokerWrapper calls
        in
        reInvokerWrapper (reverse !callsToReInvoke);
        k ()
    ) as _ in return <<()>>

 

run
    let callCounter = ref 0 in
    let result1, cancel1, changeMind1 = callWith callCounter 1 in
    let result2, cancel2, changeMind2 = callWith callCounter 2 in
    cancel1 ();
    let result3, cancel3, changeMind3 = callWith callCounter 3 in
    changeMind3 (result2 ());
    result3 ()

run
    remoteCallReInvoker ()

run
    remote (fun x |-> 4 * (5 * (6 * x)))