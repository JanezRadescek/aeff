val (=) : α × α → bool
val (<) : α × α → bool
val (>) : α × α → bool
val (<=) : α × α → bool
val (>=) : α × α → bool
val (<>) : α × α → bool
val (~-) : int → int
val (+) : int × int → int
val (*) : int × int → int
val (-) : int × int → int
val (mod) : int × int → int
val (/) : int × int → int
val ref : α → α ref
val (!) : α ref → α
val (:=) : α ref × α → unit
val toString : α → string
val absurd : α → β
val not : bool → bool
type option
val assoc : α → (α × β) list → β option
val range : int → int → int list
val reverse : α list → α list
val map : (α → β) → α list → β list
val hd : α list → α
val tl : α list → α list
val take : (int → α) → int → α list
val fold_left : (α → β → α) → α → β list → α
val fold_right : (α → β → β) → α list → β → β
val iter : (α → β) → α list → unit
val forall : (α → bool) → α list → bool
val exists : (α → bool) → α list → bool
val mem : α → α list → bool
val filter : (α → bool) → α list → α list
val complement : α list → α list → α list
val intersection : α list → α list → α list
val zip : α list → β list → (α × β) list
val unzip : (α × β) list → α list × β list
val (@) : α list × α list → α list
val length : α list → int
val nth : α list → int → α
val abs : int → int
val min : α → α → α
val max : α → α → α
val gcd : int → int → int
val lcm : int → int → int
val odd : int → bool
val even : int → bool
val id : α → α
val compose : (α → β) → (γ → α) → γ → β
val (|>) : α → (α → β) → β
val ignore : α → unit
val fst : α × β → α
val snd : α × β → β
val return : α → α
val awaitValue : ⟨α⟩ → α
type callId
type loc
type val
operation lookupReq : loc × callId
operation updateReq : loc × val × callId
operation allocReq : val × callId
operation lookupRes : val × callId
operation updateRes : callId
operation allocRes : loc × callId
val empty : α list
val lookupHeap : (α × β) list → α → β
val updateHeap : (α × β) list → α → β → (α × β) list
val allocHeap : (int × α) list → α → (int × α) list × int
val heapRunner : unit → ⟨α⟩
val lookup : int ref → int → int
val update : int ref → int → int → unit
val alloc : int ref → int → int
↑ allocReq (0, 0)
↑ allocRes (0, 0)
↑ allocReq (10, 1)
↑ allocRes (1, 1)
↑ updateReq (0, 10, 2)
↑ updateRes 2
↑ lookupReq (0, 3)
↑ lookupRes (10, 3)
↑ updateReq (1, 14, 4)
↑ updateRes 4
↑ lookupReq (0, 5)
↑ lookupRes (10, 5)
↑ lookupReq (1, 6)
↑ lookupRes (14, 6)
The process has terminated in the configuration:
run promise (lookupReq (l, callId) ↦
             let v =
                let b =
                   let b = (!) { contents = (1, 14)::(0, 10)::empty } in
                   lookupHeap b in b l in
             ↑lookupRes((v, callId), return ()); (rec awaitLookup ...) ())
    as p in
    promise (updateReq (l, v, callId) ↦
             let heap' =
                let b =
                   let b =
                      let b = (!) { contents = (1, 14)::(0, 10)::empty } in
                      updateHeap b in b l in b v in
             ↑updateRes(callId, return ());
             (:=) ({ contents = (1, 14)::(0, 10)::empty }, heap');
             (rec awaitUpdate ...) ())
    as p in
    promise (allocReq (v, callId) ↦
             let (heap', l) =
                let b =
                   let b = (!) { contents = (1, 14)::(0, 10)::empty } in
                   allocHeap b in b v in
             ↑allocRes((l, callId), return ());
             (:=) ({ contents = (1, 14)::(0, 10)::empty }, heap');
             (rec awaitAlloc ...) ())
    as p in
    return p
|| 
run (return (10, 14))
