type callId = int
type loc = int
type val = int

operation lookupReq : loc * callId
operation updateReq : loc * val * callId
operation allocReq : val * callId

operation lookupRes : val * callId
operation updateRes : callId
operation allocRes : loc * callId

let (empty : 'a list) = []

let rec (lookupHeap : ('a * 'b) list -> 'a -> 'b) ((l', v) :: heap') l =
  if l = l' then v else lookupHeap heap' l

let rec (updateHeap : ('a * 'b) list -> 'a -> 'b -> ('a * 'b) list) ((l', v') :: heap') l v =
  if l = l' then (l, v) :: heap' else (l', v') :: updateHeap heap' l v

let (allocHeap : (int * 'b) list -> 'b -> ((int * 'b) list * int)) heap v =
  let l = length heap in
  (l, v) :: heap, l

let (heapRunner : unit -> unit) () =
    let heap = ref empty in
 
    promise (lookupReq (l, callId) k |->
        let v = lookupHeap !heap l in
        send lookupRes (v, callId);
        k ()
    ) as _ in

    promise (updateReq (l, v, callId) k |->
        let heap' = updateHeap !heap l v in
        send updateRes callId;
        heap := heap';
        k ()
    ) as _ in

    promise (allocReq (v, callId) k |->
        let heap', l = allocHeap !heap v in
        send allocRes (l, callId);
        heap := heap';
        k ()
    ) as _ in
    ()

let (lookup : int ref -> int -> int) callCounter l =
    let callNo = !callCounter in
    send lookupReq (l, callNo);
    callCounter := callNo + 1;
    promise (lookupRes (v, callNo') when callNo = callNo' |->
        return <<v>>
    ) as p in awaitValue p

let (update  : int ref -> int -> int -> unit) callCounter l v =
    let callNo = !callCounter in
    send updateReq (l, v, callNo);
    callCounter := callNo + 1;
    promise (updateRes (callNo') when callNo = callNo' |->
        return <<()>>
    ) as p in awaitValue p

let (alloc : int ref -> int -> int) callCounter v =
    let callNo = !callCounter in
    send allocReq (v, callNo);
    callCounter := callNo + 1;
    promise (allocRes (l, callNo') when callNo = callNo' |->
        return <<l>>
    ) as p in awaitValue p

run
    let callCounter = ref 0 in
    let l = alloc callCounter 0 in
    let l' = alloc callCounter 10 in
    update callCounter l 10;
    update callCounter l' (lookup callCounter l + 4);
    return (lookup callCounter l, lookup callCounter l')

run
    heapRunner ()
