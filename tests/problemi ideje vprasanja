
19 
        let (id : 'a -> 'a) x = x
        let (compare : 'a -> 'b -> bool) a b =
                let a1 = id a in
                1a = b //tu je napaka uporabnika (mislil je a1 namesto 1a). 
                        //To napako aeff napaƒçno zazna in se prito≈æi, da ne more 1 uporabiti na a.
                        // Aeff bi moral reƒçi spremenljivka 1a ne obstaja. 
        run compare 5 "7"

20      let (compare : 'a -> 'b -> bool) a b =
                let (id : 'a -> 'a) x = x in
                let a1 = id a in
                a1 = b
        run compare 5 "7"

        vrne error. Samo topleveldef imajo obliko (f : tip) = abs
                                preostale imajo obliko f = (abs : tip)



22      TODO podaj typecheckerju tudi LOC


24      Bomo med vgrajene funkcije dodali getTy?


29      24:11   Ground type ùê¥, ùêµ ::= ... brez A -> B 

        we assign a fixed signature op : ùê¥op that specifies the type ùê¥op of the payload
of the corresponding signal or interrupt. Crucially, in order to be able to later prove that ùúÜ√¶ is type
safe (see Theorem 3.3, but also the relevant discussion in Section 6), we restrict these signatures to
ground types ùê¥, ùêµ, . . ., which include standard base, unit, empty, product, and sum types.

        ampak 
        async.aeff 
        ima
        operation question : unit -> int





32      fix reference
        Meni zgleda kot, da deluje
        ƒåe naredimo narobe (recimo napi≈°emo ref int namesto int ref) pa dobimo ƒçisto napaƒçen error msg






33      We need mobile only for send righ?

        
        const is always mobile, for tuple you can check recursively 
        promise is never mobile.

        Is reference mobile?
        When is lambda mobile?
        When is reclambda mobile
        

        Is variable mobile?
                Tyconst yes
                TyApply check subtypes
                TyParam ?? only part of arrow lets skip
                TyArrow depends
                TyTuple check subtypes
                TyPromise No
                TyReference YES/NO ???
                TyMobile YES :)
        
        
        let x = 1 in
        let y = f x in
        send op y  //is y mobie?

34      is ok sending reference with its value packed in?

        



        


