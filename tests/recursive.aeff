let rec (i : int -> int -> int) x y  = if x <= 0 then 0 else y + (i (x-1) y) 

(*let rec (i : int -> int -> int)  = fun x y |-> if x <= 0 then 0 else y + (i (x-1) y) *)

let rec (hh : int -> int -> int) x y = x + y

 let rec (g : int -> int) = function 
    | 0 |-> 0 
    | n |-> n + g (n-1) 

(*let rec assoc = (function x d |-> 
    match d with
        | [] |-> None
        | (key, v) :: lst |-> if x = key then Some v else assoc x lst
    : string -> (string x int) list -> int) *)

run i 2 3

run hh 1 4